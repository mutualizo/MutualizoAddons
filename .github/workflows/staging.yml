name: Deploy to Staging

on:
  push:
    branches:
      - 14.0_staging
env:
  AWS_REGION: us-east-2
  STAGE: stg
  ECR_REPOSITORY: ${{vars.SERVICE_NAME}}-stg
  ECS_CLUSTER: ${{vars.ECS_CLUSTER}}-stg

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::652510808251:role/github-actions-access
          role-session-name: github-actions
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Tag and push image as latest to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
      needs: build-and-push
      runs-on: ubuntu-latest
      permissions:
        id-token: write
        contents: read
        issues: write

      steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: arn:aws:iam::652510808251:role/github-actions-access
            role-session-name: github-actions
            audience: sts.amazonaws.com
            aws-region: ${{env.AWS_REGION}}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Download task definition
          run: |
            aws ecs describe-task-definition \
              --task-definition $ECR_REPOSITORY \
              --query taskDefinition > task-definition.json
            cat task-definition.json
          env:
            ECR_REPOSITORY: ${{env.ECR_REPOSITORY}}

        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: ${{vars.SERVICE_NAME}}
            image: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}
          env:
            ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
            IMAGE_TAG: ${{github.sha}}

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{env.ECR_REPOSITORY}}
            cluster: ${{env.ECS_CLUSTER}}
            wait-for-service-stability: true
